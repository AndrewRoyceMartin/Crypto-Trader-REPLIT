Instead of logging trades manually, the most accurate and audit-proof source is:

‚úÖ OKX‚Äôs own trade history API

We‚Äôll build a module that:

Authenticates via your OKXCreds

Pulls actual executed trades (buy/sell history)

Converts to a clean pandas DataFrame

Optionally saves to CSV or SQLite (local storage in Replit)

‚úÖ Step-by-Step Plan
üîê 1. Use OKX REST endpoint:

GET /api/v5/trade/fills

Gets the fills (executed trades) for spot, margin, or derivatives.

Requires: API key, secret, passphrase

Endpoint:

https://www.okx.com/api/v5/trade/fills

üìÅ File: okx/trade_history.py
# okx/trade_history.py

import requests
import pandas as pd
import time
import hmac
import hashlib
import base64
import os
from datetime import datetime
from typing import Dict

class OKXTradeHistory:
    def __init__(self):
        self.base_url = "https://www.okx.com"
        self.creds = self._load_creds()

    def _load_creds(self) -> Dict:
        return {
            "api_key": os.getenv("OKX_API_KEY", ""),
            "secret_key": os.getenv("OKX_SECRET_KEY", ""),
            "passphrase": os.getenv("OKX_PASSPHRASE", "")
        }

    def _headers(self, method: str, path: str, body: str = "") -> Dict:
        ts = datetime.utcnow().isoformat(timespec='milliseconds') + "Z"
        msg = f"{ts}{method}{path}{body}"
        sign = base64.b64encode(hmac.new(
            self.creds["secret_key"].encode("utf-8"),
            msg.encode("utf-8"),
            hashlib.sha256
        ).digest()).decode()

        return {
            "OK-ACCESS-KEY": self.creds["api_key"],
            "OK-ACCESS-SIGN": sign,
            "OK-ACCESS-TIMESTAMP": ts,
            "OK-ACCESS-PASSPHRASE": self.creds["passphrase"],
            "Content-Type": "application/json"
        }

    def get_trade_fills(self, instType: str = "SPOT", limit: int = 100) -> pd.DataFrame:
        """
        Pull recent executed trades (fills) from OKX account.
        instType: SPOT / MARGIN / SWAP / FUTURES
        """
        path = "/api/v5/trade/fills"
        url = self.base_url + path
        headers = self._headers("GET", path)
        params = {
            "instType": instType,
            "limit": limit
        }

        response = requests.get(url, headers=headers, params=params)
        data = response.json()

        if not data.get("data"):
            print("No trade fills found.")
            return pd.DataFrame()

        records = data["data"]
        df = pd.DataFrame(records)

        # Format/clean columns
        df["price"] = df["fillPx"].astype(float)
        df["size"] = df["fillSz"].astype(float)
        df["side"] = df["side"].str.upper()
        df["timestamp"] = pd.to_datetime(df["ts"].astype(int), unit='ms')

        return df[["timestamp", "instId", "side", "price", "size", "tradeId", "ordId"]]

    def save_trades_to_csv(self, filename="okx_trade_history.csv"):
        df = self.get_trade_fills()
        if not df.empty:
            df.to_csv(filename, index=False)
            print(f"‚úÖ Saved {len(df)} trades to {filename}")
        else:
            print("‚ö†Ô∏è No trades to save.")

üß™ Example Usage (in main.py or Jupyter cell)
from okx.trade_history import OKXTradeHistory

okx_history = OKXTradeHistory()
df = okx_history.get_trade_fills(instType="SPOT")

print(df.head())  # show latest trades

# Optional: save to file
okx_history.save_trades_to_csv()

‚úÖ Output (Local CSV: okx_trade_history.csv)
timestamp	instId	side	price	size	tradeId	ordId
2025-09-10 12:32	ETH-USDT	BUY	1620.50	0.05	8923234	222833
...	...	...	...	...	...	...