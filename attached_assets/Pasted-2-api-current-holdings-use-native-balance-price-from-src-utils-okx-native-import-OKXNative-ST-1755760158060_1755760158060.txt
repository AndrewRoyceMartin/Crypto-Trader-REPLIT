2) /api/current-holdings (use native balance + price)
from src.utils.okx_native import OKXNative, STABLES

@app.route("/api/current-holdings")
def api_current_holdings():
    if not warmup["done"]:
        return jsonify({"error": "System still initializing"}), 503
    try:
        client = OKXNative.from_env()
        acc = client.balance()
        details = acc.get("details", [])
        holdings, total_value = [], 0.0

        for d in details:
            ccy = d.get("ccy", "")
            bal = float(d.get("bal", 0) or 0)
            avail = float(d.get("availBal", 0) or 0)
            if bal <= 0:
                continue

            if ccy in STABLES:
                price = 1.0
                value = bal
            else:
                tk = client.ticker(f"{ccy}-USDT")
                price = tk["last"]
                if price <= 0:
                    continue
                value = bal * price

            cost_basis = value * 0.8  # TODO: replace with real fills-derived basis if available
            pnl_amount = value - cost_basis
            pnl_percent = (pnl_amount / cost_basis * 100) if cost_basis > 0 else 0

            holdings.append({
                "symbol": ccy,
                "name": ccy,
                "quantity": bal,
                "available_quantity": avail,
                "current_price": price,
                "current_value": value,
                "value": value,
                "cost_basis": cost_basis,
                "pnl_amount": pnl_amount,
                "pnl_percent": pnl_percent,
                "allocation_percent": 0.0,
                "is_live": True,
                "source": "okx_native_balance"
            })
            total_value += value

        if total_value > 0:
            for h in holdings:
                h["allocation_percent"] = h["current_value"] / total_value * 100

        holdings.sort(key=lambda x: x["current_value"], reverse=True)
        holdings = holdings[:10]

        return jsonify({
            "success": True,
            "holdings": holdings,
            "total_value": total_value,
            "total_holdings": len(holdings),
            "data_source": "okx_native_api",
            "last_update": iso_utc()
        })
    except Exception as e:
        logger.error(f"Error getting current holdings: {e}")
        return jsonify({"success": False, "error": str(e)}), 500