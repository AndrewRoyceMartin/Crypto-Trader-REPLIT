3) /api/performance-analytics (equity metrics + fills + trade bills)
from src.utils.okx_native import OKXNative
import statistics

@app.route("/api/performance-analytics")
def api_performance_analytics():
    """Performance analytics using OKX native API only (equity curve + fills + trade bills)."""
    try:
        timeframe = request.args.get('timeframe', '30d')
        end = utcnow()
        days = {"7d": 7, "30d": 30, "90d": 90}.get(timeframe, 30)
        start = end - timedelta(days=days)

        # Equity curve (reuse endpoint)
        with app.test_request_context(f"/api/equity-curve?timeframe={timeframe}"):
            eq_resp = api_equity_curve()
        eq_data = eq_resp.get_json() if hasattr(eq_resp, "get_json") else eq_resp[0].get_json()
        if not eq_data.get("success"):
            raise RuntimeError("equity calculation failed")
        curve = eq_data.get("equity_curve", [])
        curve.sort(key=lambda x: x["date"])

        # Current value
        current_value = curve[-1]["equity"] if curve else 0.0

        # Daily returns, Sharpe-ish, volatility
        daily_returns = []
        if len(curve) >= 2:
            prev = None
            for p in curve:
                v = p["equity"]
                if prev and prev > 0:
                    daily_returns.append(((v - prev) / prev) * 100.0)
                prev = v
        vol = statistics.stdev(daily_returns) if len(daily_returns) > 1 else 0.0
        avg_ret = statistics.mean(daily_returns) if daily_returns else 0.0
        sharpe = (avg_ret / vol) if vol > 0 else 0.0

        # Total return / daily change
        total_return = 0.0
        total_return_pct = 0.0
        daily_change = 0.0
        daily_change_pct = 0.0
        if len(curve) >= 2:
            start_val = curve[0]["equity"]
            if start_val > 0:
                total_return = current_value - start_val
                total_return_pct = (total_return / start_val) * 100.0
            yest_val = curve[-2]["equity"]
            if yest_val > 0:
                daily_change = current_value - yest_val
                daily_change_pct = (daily_change / yest_val) * 100.0

        # Max drawdown (reuse from curve)
        peak = 0.0
        max_dd = 0.0
        for p in curve:
            v = p["equity"]
            if v > peak: peak = v
            if peak > 0:
                dd = (peak - v) / peak * 100.0
                if dd > max_dd: max_dd = dd

        # Trades & win-rate via bills/fills
        client = OKXNative.from_env()
        begin_ms, end_ms = int(start.timestamp() * 1000), int(end.timestamp() * 1000)
        fills = client.fills(begin_ms=begin_ms, end_ms=end_ms, limit=200)
        total_trades = len(fills)

        # win-rate from trade bills (type 1/2): proportion of positive balance changes
        bills = client.bills(begin_ms, end_ms, limit=200)
        trade_bills = [b for b in bills if b.get("type") in ("1", "2")]
        wins = sum(1 for b in trade_bills if float(b.get("balChg", 0) or 0) > 0)
        win_rate = (wins / len(trade_bills) * 100.0) if trade_bills else 0.0

        return jsonify({
            "success": True,
            "timeframe": timeframe,
            "metrics": {
                "total_return": total_return,
                "total_return_percent": total_return_pct,
                "daily_change": daily_change,
                "daily_change_percent": daily_change_pct,
                "total_trades": total_trades,
                "win_rate": win_rate,
                "sharpe_ratio": sharpe,
                "volatility": vol,
                "max_drawdown": max_dd,
                "current_value": current_value
            },
            "data_source": "okx_native_api",
            "last_update": iso_utc()
        })
    except Exception as e:
        logger.error(f"Error getting performance analytics: {e}")
        return jsonify({
            "success": False,
            "error": str(e),
            "timeframe": request.args.get('timeframe','30d'),
            "metrics": {
                "total_return": 0.0, "total_return_percent": 0.0,
                "daily_change": 0.0, "daily_change_percent": 0.0,
                "total_trades": 0, "win_rate": 0.0,
                "sharpe_ratio": 0.0, "volatility": 0.0,
                "max_drawdown": 0.0, "current_value": 0.0
            },
            "data_source": "error"
        }), 500
